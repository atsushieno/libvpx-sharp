// This source file is generated by nclang PInvokeGenerator.
using System;
using System.Runtime.InteropServices;
using int8_t = System.SByte;
using int16_t = System.Int16;
using int32_t = System.Int32;
using int64_t = System.Int32;
using uint8_t = System.Byte;
using uint16_t = System.UInt16;
using uint32_t = System.UInt32;
using uint64_t = System.UInt32;
using int_least8_t = System.SByte;
using int_least16_t = System.Int16;
using int_least32_t = System.Int32;
using int_least64_t = System.Int32;
using uint_least8_t = System.Byte;
using uint_least16_t = System.UInt16;
using uint_least32_t = System.UInt32;
using uint_least64_t = System.UInt32;
using int_fast8_t = System.SByte;
using int_fast16_t = System.Int32;
using int_fast32_t = System.Int32;
using int_fast64_t = System.Int32;
using uint_fast8_t = System.Byte;
using uint_fast16_t = System.UInt32;
using uint_fast32_t = System.UInt32;
using uint_fast64_t = System.UInt32;
using intptr_t = System.Int32;
using uintptr_t = System.UInt32;
using intmax_t = System.Int32;
using uintmax_t = System.UInt32;
using __gwchar_t = System.Int32;
using vpx_img_fmt_t =  LibVpxSharp.VpxImageFormat;
using vpx_color_space_t =  vpx_color_space;
using vpx_color_range_t =  vpx_color_range;
using vpx_image_t = vpx_image;
using vpx_image_rect_t = vpx_image_rect;
using vpx_codec_err_t =  LibVpxSharp.VpxCodecError;
using vpx_codec_caps_t = VpxCodecCapabilities;
using vpx_codec_flags_t = LibVpxSharp.VpxCodecFlags;
using vpx_codec_iface_t = vpx_codec_iface;
using vpx_codec_iface_ptr = System.IntPtr;
using vpx_codec_priv_t = vpx_codec_priv;
using vpx_codec_iter_t = System.IntPtr;
using vpx_codec_ctx_t = vpx_codec_ctx;
using vpx_bit_depth_t =  vpx_bit_depth;
using vp8_postproc_cfg_t = vp8_postproc_cfg;
using vpx_ref_frame_type_t =  vpx_ref_frame_type;
using vpx_ref_frame_t = vpx_ref_frame;
using vp9_ref_frame_t = vp9_ref_frame;
using vpx_codec_frame_buffer_t = vpx_codec_frame_buffer;
using vpx_get_frame_buffer_cb_fn_t = System.Func<System.IntPtr, System.Int32, Pointer<vpx_codec_frame_buffer>, System.Int32>;
using vpx_release_frame_buffer_cb_fn_t = System.Func<System.IntPtr, Pointer<vpx_codec_frame_buffer>, System.Int32>;
//using vpx_codec_stream_info_t = vpx_codec_stream_info;
using vpx_codec_dec_cfg_t = vpx_codec_dec_cfg;
using vpx_codec_put_frame_cb_fn_t = System.Action<System.IntPtr, Pointer<vpx_image>>;
using vpx_codec_put_slice_cb_fn_t = System.Action<System.IntPtr, Pointer<vpx_image>, Pointer<vpx_image_rect>, Pointer<vpx_image_rect>>;
using vpx_fixed_buf_t = LibVpxSharp.VpxFixedBuffer;
using vpx_codec_pts_t = System.Int32;
using vpx_codec_frame_flags_t = System.UInt32;
using vpx_codec_er_flags_t = System.UInt32;
using vpx_codec_cx_pkt_t = vpx_codec_cx_pkt;
using vpx_codec_enc_output_cx_pkt_cb_fn_t = System.Action<Pointer<vpx_codec_cx_pkt>, System.IntPtr>;
using vpx_codec_priv_output_cx_pkt_cb_pair_t = vpx_codec_enc_output_cx_cb_pair;
using vpx_rational_t = vpx_rational;
using vpx_enc_frame_flags_t = LibVpxSharp.VpxEncoderFlags;
using vpx_codec_enc_cfg_ptr = System.IntPtr;
using vpx_codec_enc_cfg_t = vpx_codec_enc_cfg;
using vpx_svc_extra_cfg_t = vpx_svc_parameters;
using VPX_SCALING_MODE =  vpx_scaling_mode_1d;
using VP9E_TEMPORAL_LAYERING_MODE =  vp9e_temporal_layering_mode;
using vpx_roi_map_t = vpx_roi_map;
using vpx_active_map_t = vpx_active_map;
using vpx_scaling_mode_t = vpx_scaling_mode;
//using vp8e_token_partitions =  vp8e_token_partitions;
//using vp9e_tune_content =  vp9e_tune_content;
//using vp8e_tuning =  vp8e_tuning;
using vpx_svc_layer_id_t = vpx_svc_layer_id;
using vpx_svc_ref_frame_config_t = vpx_svc_ref_frame_config;
using vpx_decrypt_cb = System.Action<System.IntPtr, Pointer<byte>, Pointer<System.Byte>, System.Int32>;
using vp8_decrypt_init = vpx_decrypt_init;


enum vpx_color_space //line:70, column:16
{
	VPX_CS_UNKNOWN  = 0,
	VPX_CS_BT_601  = 1,
	VPX_CS_BT_709  = 2,
	VPX_CS_SMPTE_170  = 3,
	VPX_CS_SMPTE_240  = 4,
	VPX_CS_BT_2020  = 5,
	VPX_CS_RESERVED  = 6,
	VPX_CS_SRGB  = 7,
}

enum vpx_color_range //line:82, column:16
{
	VPX_CR_STUDIO_RANGE  = 0,
	VPX_CR_FULL_RANGE  = 1,
}

[StructLayout (LayoutKind.Sequential)]
struct vpx_image //line:88, column:18
{
	public vpx_img_fmt_t fmt;
	public vpx_color_space_t cs;
	public vpx_color_range_t range;
	public uint w;
	public uint h;
	public uint bit_depth;
	public uint d_w;
	public uint d_h;
	public uint r_w;
	public uint r_h;
	public uint x_chroma_shift;
	public uint y_chroma_shift;
	public ConstArrayOf<Pointer<byte>> planes;
	public ConstArrayOf<int> stride;
	public int bps;
	public System.IntPtr user_priv;
	public Pointer<byte> img_data;
	public int img_data_owner;
	public int self_allocd;
	public System.IntPtr fb_priv;
}

[StructLayout (LayoutKind.Sequential)]
struct vpx_image_rect //line:136, column:18
{
	public uint x;
	public uint y;
	public uint w;
	public uint h;
}

[StructLayout (LayoutKind.Sequential)]
struct vpx_codec_iface //line:173, column:24
{
}

[StructLayout (LayoutKind.Sequential)]
struct vpx_codec_priv //line:181, column:24
{
}

[StructLayout (LayoutKind.Sequential)]
struct vpx_codec_ctx //line:199, column:18
{
	public Pointer<char> name;
	public vpx_codec_iface_ptr iface;
	public vpx_codec_err_t err;
	public Pointer<char> err_detail;
	public vpx_codec_flags_t init_flags;
}

[StructLayout (LayoutKind.Sequential)]
struct vpx_codec_enc_cfg //line:209, column:20
{
	public uint g_usage;
	public uint g_threads;
	public uint g_profile;
	public uint g_w;
	public uint g_h;
	public vpx_bit_depth_t g_bit_depth;
	public uint           g_input_bit_depth;
	public vpx_rational    g_timebase;
	public vpx_codec_er_flags_t g_error_resilient;
	public vpx_enc_pass g_pass;
	public uint g_lag_in_frames;
	public uint rc_dropframe_thresh;
	public uint           rc_resize_allowed;
	public uint           rc_scaled_width;
	public uint           rc_scaled_height;
	public uint           rc_resize_up_thresh;
	public uint           rc_resize_down_thresh;
	public vpx_rc_mode rc_end_usage;
	public vpx_fixed_buf_t rc_twopass_stats_in;
	public vpx_fixed_buf_t rc_firstpass_mb_stats_in;
	public uint           rc_target_bitrate;
	public uint           rc_min_quantizer;
	public uint           rc_max_quantizer;
	public uint           rc_undershoot_pct;
	public uint           rc_overshoot_pct;
	public uint rc_buf_sz;
	public uint           rc_buf_initial_sz;
	public uint           rc_buf_optimal_sz;
	public uint rc_2pass_vbr_bias_pct;
	public uint           rc_2pass_vbr_minsection_pct;
	public uint           rc_2pass_vbr_maxsection_pct;
	public vpx_kf_mode       kf_mode;
	public uint           kf_min_dist;
	public uint           kf_max_dist;
	public uint           ss_number_layers;
	[MarshalAs (UnmanagedType.ByValArray, SizeConst = VpxMarshal.VPX_SS_MAX_LAYERS)]
	public int [] ss_enable_auto_alt_ref;
	[MarshalAs(UnmanagedType.ByValArray, SizeConst = VpxMarshal.VPX_SS_MAX_LAYERS)]
	public uint [] ss_target_bitrate;
	public uint           ts_number_layers;
	[MarshalAs(UnmanagedType.ByValArray, SizeConst = VpxMarshal.VPX_TS_MAX_LAYERS)]
	public uint [] ts_target_bitrate;
	[MarshalAs(UnmanagedType.ByValArray, SizeConst = VpxMarshal.VPX_TS_MAX_LAYERS)]
	public uint [] ts_rate_decimator;
	public uint           ts_periodicity;
	[MarshalAs(UnmanagedType.ByValArray, SizeConst = VpxMarshal.VPX_TS_MAX_PERIODICITY)]
	public uint[]           ts_layer_id;
	[MarshalAs(UnmanagedType.ByValArray, SizeConst = VpxMarshal.VPX_MAX_LAYERS)]
	public uint[] layer_target_bitrate;
	public int temporal_layering_mode;
}

enum vpx_bit_depth //line:219, column:16
{
	VPX_BITS_8  = 8,
	VPX_BITS_10  = 10,
	VPX_BITS_12  = 12,
}

enum vp8_com_control_id //line:44, column:6
{
	VP8_SET_REFERENCE  = 1,
	VP8_COPY_REFERENCE  = 2,
	VP8_SET_POSTPROC  = 3,
	VP8_SET_DBG_COLOR_REF_FRAME  = 4,
	VP8_SET_DBG_COLOR_MB_MODES  = 5,
	VP8_SET_DBG_COLOR_B_MODES  = 6,
	VP8_SET_DBG_DISPLAY_MV  = 7,
	VP9_GET_REFERENCE  = 128,
	VP8_COMMON_CTRL_ID_MAX  = 129,
	VP8_DECODER_CTRL_ID_START  = 256,
}

enum vp8_postproc_level //line:66, column:6
{
	VP8_NOFILTERING  = 0,
	VP8_DEBLOCK  = 1,
	VP8_DEMACROBLOCK  = 2,
	VP8_ADDNOISE  = 4,
	VP8_DEBUG_TXT_FRAME_INFO  = 8,
	VP8_DEBUG_TXT_MBLK_MODES  = 16,
	VP8_DEBUG_TXT_DC_DIFF  = 32,
	VP8_DEBUG_TXT_RATE_INFO  = 64,
	VP8_MFQE  = 1024,
}

[StructLayout (LayoutKind.Sequential)]
struct vp8_postproc_cfg //line:85, column:16
{
	public int post_proc_flag;
	public int deblocking_level;
	public int noise_level;
}

enum vpx_ref_frame_type //line:95, column:14
{
	VP8_LAST_FRAME  = 1,
	VP8_GOLD_FRAME  = 2,
	VP8_ALTR_FRAME  = 4,
}

[StructLayout (LayoutKind.Sequential)]
struct vpx_ref_frame //line:105, column:16
{
	public vpx_ref_frame_type_t frame_type;
	public vpx_image_t img;
}

[StructLayout (LayoutKind.Sequential)]
struct vp9_ref_frame //line:114, column:16
{
	public int idx;
	public vpx_image_t img;
}

[StructLayout (LayoutKind.Sequential)]
struct vpx_codec_frame_buffer //line:39, column:16
{
	public Pointer<uint8_t> data;
	public int size;
	public System.IntPtr priv;
}

[StructLayout (LayoutKind.Sequential)]
struct vpx_codec_dec_cfg //line:207, column:20
{
	public Pointer<vpx_codec_dec_cfg> dec;
}

[StructLayout (LayoutKind.Sequential)]
struct vpx_fixed_buf //line:107, column:18
{
	public System.IntPtr buf;
	public int sz;
}

enum vpx_codec_cx_pkt_kind //line:162, column:8
{
	VPX_CODEC_CX_FRAME_PKT  = 0,
	VPX_CODEC_STATS_PKT  = 1,
	VPX_CODEC_FPMB_STATS_PKT  = 2,
	VPX_CODEC_PSNR_PKT  = 3,
	VPX_CODEC_CUSTOM_PKT  = 256,
}

[StructLayout (LayoutKind.Sequential)]
struct vpx_codec_cx_pkt //line:182, column:18
{
	public  vpx_codec_cx_pkt_kind kind;
}

[StructLayout (LayoutKind.Sequential)]
struct vpx_psnr_pkt //line:203, column:14
{
	public ConstArrayOf<uint> samples;
	public ConstArrayOf<uint64_t> sse;
	public ConstArrayOf<double> psnr;
	//public vpx_psnr_pkt psnr;
}

[StructLayout (LayoutKind.Sequential)]
struct vpx_codec_enc_output_cx_cb_pair //line:237, column:18
{
	public vpx_codec_enc_output_cx_pkt_cb_fn_t output_cx_pkt;
	public System.IntPtr user_priv;
}

[StructLayout (LayoutKind.Sequential)]
struct vpx_rational //line:246, column:18
{
	public int num;
	public int den;
}

enum vpx_enc_pass //line:253, column:8
{
	VPX_RC_ONE_PASS  = 0,
	VPX_RC_FIRST_PASS  = 1,
	VPX_RC_LAST_PASS  = 2,
}

enum vpx_rc_mode //line:261, column:8
{
	VPX_VBR  = 0,
	VPX_CBR  = 1,
	VPX_CQ  = 2,
	VPX_Q  = 3,
}

enum vpx_kf_mode //line:277, column:8
{
	VPX_KF_FIXED  = 0,
	VPX_KF_AUTO  = 1,
	VPX_KF_DISABLED  = 0,
}

[StructLayout (LayoutKind.Sequential)]
struct vpx_svc_parameters //line:758, column:18
{
	public ConstArrayOf<int> max_quantizers;
	public ConstArrayOf<int> min_quantizers;
	public ConstArrayOf<int> scaling_factor_num;
	public ConstArrayOf<int> scaling_factor_den;
	public int temporal_layering_mode;
}

enum vp8e_enc_control_id //line:143, column:6
{
	VP8E_SET_ROI_MAP  = 8,
	VP8E_SET_ACTIVEMAP  = 9,
	VP8E_SET_SCALEMODE  = 11,
	VP8E_SET_CPUUSED  = 13,
	VP8E_SET_ENABLEAUTOALTREF  = 14,
	VP8E_SET_NOISE_SENSITIVITY  = 15,
	VP8E_SET_SHARPNESS  = 16,
	VP8E_SET_STATIC_THRESHOLD  = 17,
	VP8E_SET_TOKEN_PARTITIONS  = 18,
	VP8E_GET_LAST_QUANTIZER  = 19,
	VP8E_GET_LAST_QUANTIZER_64  = 20,
	VP8E_SET_ARNR_MAXFRAMES  = 21,
	VP8E_SET_ARNR_STRENGTH  = 22,
	VP8E_SET_ARNR_TYPE  = 23,
	VP8E_SET_TUNING  = 24,
	VP8E_SET_CQ_LEVEL  = 25,
	VP8E_SET_MAX_INTRA_BITRATE_PCT  = 26,
	VP8E_SET_FRAME_FLAGS  = 27,
	VP9E_SET_MAX_INTER_BITRATE_PCT  = 28,
	VP9E_SET_GF_CBR_BOOST_PCT  = 29,
	VP8E_SET_TEMPORAL_LAYER_ID  = 30,
	VP8E_SET_SCREEN_CONTENT_MODE  = 31,
	VP9E_SET_LOSSLESS  = 32,
	VP9E_SET_TILE_COLUMNS  = 33,
	VP9E_SET_TILE_ROWS  = 34,
	VP9E_SET_FRAME_PARALLEL_DECODING  = 35,
	VP9E_SET_AQ_MODE  = 36,
	VP9E_SET_FRAME_PERIODIC_BOOST  = 37,
	VP9E_SET_NOISE_SENSITIVITY  = 38,
	VP9E_SET_SVC  = 39,
	VP9E_SET_SVC_PARAMETERS  = 40,
	VP9E_SET_SVC_LAYER_ID  = 41,
	VP9E_SET_TUNE_CONTENT  = 42,
	VP9E_GET_SVC_LAYER_ID  = 43,
	VP9E_REGISTER_CX_CALLBACK  = 44,
	VP9E_SET_COLOR_SPACE  = 45,
	VP9E_SET_TEMPORAL_LAYERING_MODE  = 46,
	VP9E_SET_MIN_GF_INTERVAL  = 47,
	VP9E_SET_MAX_GF_INTERVAL  = 48,
	VP9E_GET_ACTIVEMAP  = 49,
	VP9E_SET_COLOR_RANGE  = 50,
	VP9E_SET_SVC_REF_FRAME_CONFIG  = 51,
	VP9E_SET_RENDER_SIZE  = 52,
}

enum vpx_scaling_mode_1d //line:563, column:14
{
	VP8E_NORMAL  = 0,
	VP8E_FOURFIVE  = 1,
	VP8E_THREEFIVE  = 2,
	VP8E_ONETWO  = 3,
}

enum vp9e_temporal_layering_mode //line:576, column:14
{
	VP9E_TEMPORAL_LAYERING_MODE_NOLAYERING  = 0,
	VP9E_TEMPORAL_LAYERING_MODE_BYPASS  = 1,
	VP9E_TEMPORAL_LAYERING_MODE_0101  = 2,
	VP9E_TEMPORAL_LAYERING_MODE_0212  = 3,
}

[StructLayout (LayoutKind.Sequential)]
struct vpx_roi_map //line:603, column:16
{
	public Pointer<byte> roi_map;
	public uint rows;
	public uint cols;
	public ConstArrayOf<int> delta_q;
	public ConstArrayOf<int> delta_lf;
	public ConstArrayOf<uint> static_threshold;
}

[StructLayout (LayoutKind.Sequential)]
struct vpx_active_map //line:624, column:16
{
	public Pointer<byte> active_map;
	public uint rows;
	public uint cols;
}

[StructLayout (LayoutKind.Sequential)]
struct vpx_scaling_mode //line:635, column:16
{
	public VPX_SCALING_MODE h_scaling_mode;
	public VPX_SCALING_MODE v_scaling_mode;
}

[StructLayout (LayoutKind.Sequential)]
struct vpx_svc_layer_id //line:678, column:16
{
	public int spatial_layer_id;
	public int temporal_layer_id;
}

[StructLayout (LayoutKind.Sequential)]
struct vpx_svc_ref_frame_config //line:691, column:16
{
	public ConstArrayOf<int> frame_flags;
	public ConstArrayOf<int> lst_fb_idx;
	public ConstArrayOf<int> gld_fb_idx;
	public ConstArrayOf<int> alt_fb_idx;
}

[StructLayout (LayoutKind.Sequential)]
struct vpx_decrypt_init //line:137, column:16
{
	public vpx_decrypt_cb decrypt_cb;
	public System.IntPtr decrypt_state;
}

static partial class VpxMarshal
{
	// function imaxabs line:290, column:17
	[DllImport (LibraryName)] internal static extern intmax_t imaxabs (intmax_t __n);

	// function imaxdiv line:293, column:18
	//[DllImport (LibraryName)] internal static extern imaxdiv_t imaxdiv (intmax_t __numer, intmax_t __denom);

	// function strtoimax line:297, column:17
	[DllImport (LibraryName)] internal static extern intmax_t strtoimax (Pointer<char> __nptr, Pointer<Pointer<byte>> __endptr, int __base);

	// function strtoumax line:301, column:18
	[DllImport (LibraryName)] internal static extern uintmax_t strtoumax (Pointer<char> __nptr, Pointer<Pointer<byte>> __endptr, int __base);

	// function wcstoimax line:305, column:17
	[DllImport (LibraryName)] internal static extern intmax_t wcstoimax (Pointer<__gwchar_t> __nptr, Pointer<Pointer<__gwchar_t>> __endptr, int __base);

	// function wcstoumax line:310, column:18
	[DllImport (LibraryName)] internal static extern uintmax_t wcstoumax (Pointer<__gwchar_t> __nptr, Pointer<Pointer<__gwchar_t>> __endptr, int __base);

	// function vpx_img_alloc line:161, column:16
	[DllImport (LibraryName)] internal static extern Pointer<vpx_image_t> vpx_img_alloc (Pointer<vpx_image_t> img, vpx_img_fmt_t fmt, uint d_w, uint d_h, uint align);

	// function vpx_img_wrap line:186, column:16
	[DllImport (LibraryName)] internal static extern Pointer<vpx_image_t> vpx_img_wrap (Pointer<vpx_image_t> img, vpx_img_fmt_t fmt, uint d_w, uint d_h, uint align, Pointer<byte> img_data);

	// function vpx_img_set_rect line:207, column:7
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_img_set_rect (Pointer<vpx_image_t> img, uint x, uint y, uint w, uint h);

	// function vpx_img_flip line:221, column:8
	[DllImport (LibraryName)] internal static extern void vpx_img_flip (Pointer<vpx_image_t> img);

	// function vpx_img_free line:229, column:8
	[DllImport (LibraryName)] internal static extern void vpx_img_free (Pointer<vpx_image_t> img);

	// function vpx_codec_version line:242, column:7
	[DllImport (LibraryName)] internal static extern int vpx_codec_version ();

	// function vpx_codec_version_str line:264, column:15
	[DllImport (LibraryName)] 
	[return:MarshalAs (UnmanagedType.LPArray)]
	internal static extern Pointer<char> vpx_codec_version_str ();

	// function vpx_codec_version_extra_str line:273, column:15
	[DllImport (LibraryName)] internal static extern Pointer<char> vpx_codec_version_extra_str ();

	// function vpx_codec_build_config line:282, column:15
	[DllImport (LibraryName)] internal static extern Pointer<char> vpx_codec_build_config ();

	// function vpx_codec_iface_name line:292, column:15
	[DllImport (LibraryName)] internal static extern Pointer<char> vpx_codec_iface_name (vpx_codec_iface_ptr iface);

	// function vpx_codec_err_to_string line:305, column:15
	[DllImport (LibraryName)] internal static extern Pointer<char> vpx_codec_err_to_string (vpx_codec_err_t err);

	// function vpx_codec_error line:318, column:15
	[DllImport (LibraryName)] internal static extern Pointer<char> vpx_codec_error (Pointer<vpx_codec_ctx_t> ctx);

	// function vpx_codec_error_detail line:331, column:15
	[DllImport (LibraryName)] internal static extern Pointer<char> vpx_codec_error_detail (Pointer<vpx_codec_ctx_t> ctx);

	// function vpx_codec_destroy line:351, column:19
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_destroy (Pointer<vpx_codec_ctx_t> ctx);

	// function vpx_codec_get_caps line:361, column:20
	[DllImport (LibraryName)] internal static extern vpx_codec_caps_t vpx_codec_get_caps (vpx_codec_iface_ptr iface);

	// function vpx_codec_control_ line:388, column:19
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_ (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id);

	// function vpx_codec_control_VP8_SET_REFERENCE line:124, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8_SET_REFERENCE (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, Pointer<vpx_ref_frame_t> data);

	// function vpx_codec_control_VP8_COPY_REFERENCE line:126, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8_COPY_REFERENCE (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, Pointer<vpx_ref_frame_t> data);

	// function vpx_codec_control_VP8_SET_POSTPROC line:128, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8_SET_POSTPROC (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, Pointer<vp8_postproc_cfg_t> data);

	// function vpx_codec_control_VP8_SET_DBG_COLOR_REF_FRAME line:130, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8_SET_DBG_COLOR_REF_FRAME (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, int data);

	// function vpx_codec_control_VP8_SET_DBG_COLOR_MB_MODES line:132, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8_SET_DBG_COLOR_MB_MODES (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, int data);

	// function vpx_codec_control_VP8_SET_DBG_COLOR_B_MODES line:134, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8_SET_DBG_COLOR_B_MODES (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, int data);

	// function vpx_codec_control_VP8_SET_DBG_DISPLAY_MV line:136, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8_SET_DBG_DISPLAY_MV (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, int data);

	// function vpx_codec_control_VP9_GET_REFERENCE line:138, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP9_GET_REFERENCE (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, Pointer<vp9_ref_frame_t> data);


	// function vpx_codec_dec_init_ver line:136, column:19
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_dec_init_ver (Pointer<vpx_codec_ctx_t> ctx, vpx_codec_iface_ptr iface, Pointer<vpx_codec_dec_cfg_t> cfg, vpx_codec_flags_t flags, int ver);


	// function vpx_codec_decode line:220, column:19
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_decode (Pointer<vpx_codec_ctx_t> ctx, Pointer<uint8_t> data, uint data_sz, System.IntPtr user_priv, long deadline);

	// function vpx_codec_get_frame line:242, column:16
	[DllImport (LibraryName)] internal static extern Pointer<vpx_image_t> vpx_codec_get_frame (Pointer<vpx_codec_ctx_t> ctx, Pointer<vpx_codec_iter_t> iter);

	// function vpx_codec_register_put_frame_cb line:279, column:19
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_register_put_frame_cb (Pointer<vpx_codec_ctx_t> ctx, vpx_codec_put_frame_cb_fn_t cb, System.IntPtr user_priv);

	// function vpx_codec_register_put_slice_cb line:321, column:19
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_register_put_slice_cb (Pointer<vpx_codec_ctx_t> ctx, vpx_codec_put_slice_cb_fn_t cb, System.IntPtr user_priv);

	// function vpx_codec_set_frame_buffer_functions line:366, column:19
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_set_frame_buffer_functions (Pointer<vpx_codec_ctx_t> ctx, vpx_get_frame_buffer_cb_fn_t cb_get, vpx_release_frame_buffer_cb_fn_t cb_release, System.IntPtr cb_priv);

	// function vpx_codec_enc_init_ver line:789, column:19
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_enc_init_ver (out vpx_codec_ctx_t ctx, vpx_codec_iface_ptr iface, Pointer<vpx_codec_enc_cfg_t> cfg, vpx_codec_flags_t flags, int ver);

	// function vpx_codec_enc_init_multi_ver line:824, column:19
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_enc_init_multi_ver (Pointer<vpx_codec_ctx_t> ctx, vpx_codec_iface_ptr iface, vpx_codec_enc_cfg_ptr cfg, int num_enc, vpx_codec_flags_t flags, Pointer<vpx_rational_t> dsf, int ver);

	// function vpx_codec_enc_config_default line:861, column:20
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_enc_config_default (vpx_codec_iface_ptr iface, out vpx_codec_enc_cfg_t cfg, uint reserved);

	// function vpx_codec_enc_config_set line:880, column:20
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_enc_config_set (Pointer<vpx_codec_ctx_t> ctx, Pointer<vpx_codec_enc_cfg_t> cfg);

	// function vpx_codec_get_global_headers line:895, column:20
	[DllImport (LibraryName)] internal static extern Pointer<vpx_fixed_buf_t> vpx_codec_get_global_headers (Pointer<vpx_codec_ctx_t> ctx);

	// function vpx_codec_encode line:940, column:20
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_encode (Pointer<vpx_codec_ctx_t> ctx, Pointer<vpx_image_t> img, vpx_codec_pts_t pts, ulong duration, vpx_enc_frame_flags_t flags, LibVpxSharp.VpxDeadline deadline);

	// function vpx_codec_set_cx_data_buf line:990, column:19
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_set_cx_data_buf (Pointer<vpx_codec_ctx_t> ctx, Pointer<vpx_fixed_buf_t> buf, uint pad_before, uint pad_after);

	// function vpx_codec_get_cx_data line:1019, column:29
	[DllImport (LibraryName)] internal static extern Pointer<vpx_codec_cx_pkt_t> vpx_codec_get_cx_data (Pointer<vpx_codec_ctx_t> ctx, Pointer<vpx_codec_iter_t> iter);

	// function vpx_codec_get_preview_frame line:1035, column:22
	[DllImport (LibraryName)] internal static extern Pointer<vpx_image_t> vpx_codec_get_preview_frame (Pointer<vpx_codec_ctx_t> ctx);

	// function vpx_codec_vp8_cx line:36, column:27
	[DllImport (LibraryName)] internal static extern IntPtr vpx_codec_vp8_cx ();

	// function vpx_codec_vp9_cx line:45, column:27
	[DllImport (LibraryName)] internal static extern IntPtr vpx_codec_vp9_cx ();

	// function vpx_codec_vp10_cx line:54, column:27
	[DllImport (LibraryName)] internal static extern IntPtr vpx_codec_vp10_cx ();

	// function vpx_codec_control_VP8E_SET_FRAME_FLAGS line:706, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8E_SET_FRAME_FLAGS (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, int data);

	// function vpx_codec_control_VP8E_SET_TEMPORAL_LAYER_ID line:708, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8E_SET_TEMPORAL_LAYER_ID (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, int data);

	// function vpx_codec_control_VP8E_SET_ROI_MAP line:710, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8E_SET_ROI_MAP (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, Pointer<vpx_roi_map_t> data);

	// function vpx_codec_control_VP8E_SET_ACTIVEMAP line:712, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8E_SET_ACTIVEMAP (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, Pointer<vpx_active_map_t> data);

	// function vpx_codec_control_VP8E_SET_SCALEMODE line:714, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8E_SET_SCALEMODE (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, Pointer<vpx_scaling_mode_t> data);

	// function vpx_codec_control_VP9E_SET_SVC line:717, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP9E_SET_SVC (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, int data);

	// function vpx_codec_control_VP9E_SET_SVC_PARAMETERS line:719, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP9E_SET_SVC_PARAMETERS (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, System.IntPtr data);

	// function vpx_codec_control_VP9E_REGISTER_CX_CALLBACK line:721, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP9E_REGISTER_CX_CALLBACK (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, System.IntPtr data);

	// function vpx_codec_control_VP9E_SET_SVC_LAYER_ID line:723, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP9E_SET_SVC_LAYER_ID (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, Pointer<vpx_svc_layer_id_t> data);

	// function vpx_codec_control_VP8E_SET_CPUUSED line:726, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8E_SET_CPUUSED (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, int data);

	// function vpx_codec_control_VP8E_SET_ENABLEAUTOALTREF line:728, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8E_SET_ENABLEAUTOALTREF (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, uint data);

	// function vpx_codec_control_VP8E_SET_NOISE_SENSITIVITY line:730, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8E_SET_NOISE_SENSITIVITY (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, uint data);

	// function vpx_codec_control_VP8E_SET_SHARPNESS line:732, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8E_SET_SHARPNESS (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, uint data);

	// function vpx_codec_control_VP8E_SET_STATIC_THRESHOLD line:734, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8E_SET_STATIC_THRESHOLD (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, uint data);

	// function vpx_codec_control_VP8E_SET_TOKEN_PARTITIONS line:736, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8E_SET_TOKEN_PARTITIONS (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, int data);

	// function vpx_codec_control_VP8E_SET_ARNR_MAXFRAMES line:739, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8E_SET_ARNR_MAXFRAMES (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, uint data);

	// function vpx_codec_control_VP8E_SET_ARNR_STRENGTH line:741, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8E_SET_ARNR_STRENGTH (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, uint data);

	// function vpx_codec_control_VP8E_SET_ARNR_TYPE line:743, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8E_SET_ARNR_TYPE (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, uint data);

	// function vpx_codec_control_VP8E_SET_TUNING line:745, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8E_SET_TUNING (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, int data);

	// function vpx_codec_control_VP8E_SET_CQ_LEVEL line:747, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8E_SET_CQ_LEVEL (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, uint data);

	// function vpx_codec_control_VP9E_SET_TILE_COLUMNS line:750, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP9E_SET_TILE_COLUMNS (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, int data);

	// function vpx_codec_control_VP9E_SET_TILE_ROWS line:752, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP9E_SET_TILE_ROWS (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, int data);

	// function vpx_codec_control_VP8E_GET_LAST_QUANTIZER line:755, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8E_GET_LAST_QUANTIZER (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, Pointer<int> data);

	// function vpx_codec_control_VP8E_GET_LAST_QUANTIZER_64 line:757, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8E_GET_LAST_QUANTIZER_64 (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, Pointer<int> data);

	// function vpx_codec_control_VP9E_GET_SVC_LAYER_ID line:759, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP9E_GET_SVC_LAYER_ID (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, Pointer<vpx_svc_layer_id_t> data);

	// function vpx_codec_control_VP8E_SET_MAX_INTRA_BITRATE_PCT line:762, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8E_SET_MAX_INTRA_BITRATE_PCT (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, uint data);

	// function vpx_codec_control_VP8E_SET_MAX_INTER_BITRATE_PCT line:764, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8E_SET_MAX_INTER_BITRATE_PCT (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, uint data);

	// function vpx_codec_control_VP8E_SET_SCREEN_CONTENT_MODE line:767, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8E_SET_SCREEN_CONTENT_MODE (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, uint data);

	// function vpx_codec_control_VP9E_SET_GF_CBR_BOOST_PCT line:770, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP9E_SET_GF_CBR_BOOST_PCT (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, uint data);

	// function vpx_codec_control_VP9E_SET_LOSSLESS line:773, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP9E_SET_LOSSLESS (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, uint data);

	// function vpx_codec_control_VP9E_SET_FRAME_PARALLEL_DECODING line:776, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP9E_SET_FRAME_PARALLEL_DECODING (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, uint data);

	// function vpx_codec_control_VP9E_SET_AQ_MODE line:779, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP9E_SET_AQ_MODE (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, uint data);

	// function vpx_codec_control_VP9E_SET_FRAME_PERIODIC_BOOST line:782, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP9E_SET_FRAME_PERIODIC_BOOST (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, uint data);

	// function vpx_codec_control_VP9E_SET_NOISE_SENSITIVITY line:785, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP9E_SET_NOISE_SENSITIVITY (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, uint data);

	// function vpx_codec_control_VP9E_SET_TUNE_CONTENT line:788, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP9E_SET_TUNE_CONTENT (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, int data);

	// function vpx_codec_control_VP9E_SET_COLOR_SPACE line:791, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP9E_SET_COLOR_SPACE (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, int data);

	// function vpx_codec_control_VP9E_SET_MIN_GF_INTERVAL line:794, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP9E_SET_MIN_GF_INTERVAL (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, uint data);

	// function vpx_codec_control_VP9E_SET_MAX_GF_INTERVAL line:797, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP9E_SET_MAX_GF_INTERVAL (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, uint data);

	// function vpx_codec_control_VP9E_GET_ACTIVEMAP line:800, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP9E_GET_ACTIVEMAP (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, Pointer<vpx_active_map_t> data);

	// function vpx_codec_control_VP9E_SET_COLOR_RANGE line:803, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP9E_SET_COLOR_RANGE (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, int data);

	// function vpx_codec_control_VP9E_SET_SVC_REF_FRAME_CONFIG line:806, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP9E_SET_SVC_REF_FRAME_CONFIG (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, Pointer<vpx_svc_ref_frame_config_t> data);

	// function vpx_codec_control_VP9E_SET_RENDER_SIZE line:809, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP9E_SET_RENDER_SIZE (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, Pointer<int> data);

	// function vpx_codec_vp8_dx line:37, column:27
	[DllImport (LibraryName)] internal static extern vpx_codec_iface_ptr vpx_codec_vp8_dx ();

	// function vpx_codec_vp9_dx line:46, column:27
	[DllImport (LibraryName)] internal static extern vpx_codec_iface_ptr vpx_codec_vp9_dx ();

	// function vpx_codec_vp10_dx line:55, column:27
	[DllImport (LibraryName)] internal static extern vpx_codec_iface_ptr vpx_codec_vp10_dx ();

	// function vpx_codec_control_VP8D_GET_LAST_REF_UPDATES line:159, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8D_GET_LAST_REF_UPDATES (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, Pointer<int> data);

	// function vpx_codec_control_VP8D_GET_FRAME_CORRUPTED line:161, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8D_GET_FRAME_CORRUPTED (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, Pointer<int> data);

	// function vpx_codec_control_VP8D_GET_LAST_REF_USED line:163, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8D_GET_LAST_REF_USED (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, Pointer<int> data);

	// function vpx_codec_control_VPXD_SET_DECRYPTOR line:165, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VPXD_SET_DECRYPTOR (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, Pointer<vpx_decrypt_init> data);

	// function vpx_codec_control_VP8D_SET_DECRYPTOR line:167, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP8D_SET_DECRYPTOR (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, Pointer<vpx_decrypt_init> data);

	// function vpx_codec_control_VP9D_GET_DISPLAY_SIZE line:169, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP9D_GET_DISPLAY_SIZE (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, Pointer<int> data);

	// function vpx_codec_control_VP9D_GET_BIT_DEPTH line:171, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP9D_GET_BIT_DEPTH (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, Pointer<uint> data);

	// function vpx_codec_control_VP9D_GET_FRAME_SIZE line:173, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP9D_GET_FRAME_SIZE (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, Pointer<int> data);

	// function vpx_codec_control_VP9_INVERT_TILE_DECODE_ORDER line:175, column:1
	[DllImport (LibraryName)] internal static extern vpx_codec_err_t vpx_codec_control_VP9_INVERT_TILE_DECODE_ORDER (Pointer<vpx_codec_ctx_t> ctx, int ctrl_id, int data);

}


public struct Pointer<T>
{
	public IntPtr Handle;
	public static implicit operator IntPtr (Pointer<T> value) { return value.Handle; }
	public static implicit operator Pointer<T> (IntPtr value) { return new Pointer<T> (value); }

	public Pointer (IntPtr handle)
	{
		Handle = handle;
	}
}
public struct ArrayOf<T> {}
public struct ConstArrayOf<T> {}

